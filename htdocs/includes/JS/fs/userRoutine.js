var filter = new setFilter();function number_format( number, decimals, dec_point, thousands_sep ) {	// Format a number with grouped thousands	// 	// +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)	// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)	// +	 bugfix by: Michael White (http://crestidg.com)	var i, j, kw, kd, km;	// input sanitation & defaults	if( isNaN(decimals = Math.abs(decimals)) ){		decimals = 2;	}	if( dec_point == undefined ){		dec_point = ",";	}	if( thousands_sep == undefined ){		thousands_sep = ".";	}	i = parseInt(number = (+number || 0).toFixed(decimals)) + "";	if( (j = i.length) > 3 ){		j = j % 3;	} else{		j = 0;	}	km = (j ? i.substr(0, j) + thousands_sep : "");	kw = i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands_sep);	//kd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).slice(2) : "");	kd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).replace(/-/, 0).slice(2) : "");	return km + kw + kd;}function getRandomInt(min, max)	{	return Math.floor(Math.random() * (max - min + 1)) + min;	} function trim( str, charlist ) {	// Strip whitespace (or other characters) from the beginning and end of a string	// 	// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)	// +   improved by: mdsjack (http://www.mdsjack.bo.it)	// +   improved by: Alexander Ermolaev (http://snippets.dzone.com/user/AlexanderErmolaev)	// +	  input by: Erkekjetter	// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)    charlist = !charlist ? ' \\s\xA0' : charlist.replace('/([\[\]\(\)\.\?\/\*\{\}\+\$\^\:])/g', '\$1');    var re = new RegExp('^[' + charlist + ']+|[' + charlist + ']+$', 'g');    return str.replace(re, '');	}function isNumeric(n) 	{	return !isNaN(parseFloat(n)) && isFinite(n);	}function is_string(mixed_var) 	{  //  discuss at: http://phpjs.org/functions/is_string/  // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)  return (typeof mixed_var === 'string');	}	function str_replace ( search, replace, subject ) 	{	// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)	// +   improved by: Gabriel Paderni	if(!(replace instanceof Array)){		replace=new Array(replace);		if(search instanceof Array){//If search	is an array and replace	is a string, then this replacement string is used for every value of search			while(search.length>replace.length){				replace[replace.length]=replace[0];				}			}		}	if(!(search instanceof Array))search=new Array(search);	while(search.length>replace.length){//If replace	has fewer values than search , then an empty string is used for the rest of replacement values		replace[replace.length]='';		}	if(subject instanceof Array){//If subject is an array, then the search and replace is performed with every entry of subject , and the return value is an array as well.		for(k in subject){			subject[k]=str_replace(search,replace,subject[k]);			}			return subject;		}		for(var k=0; k<search.length; k++){		var i = subject.indexOf(search[k]);		while(i>-1){			subject = subject.replace(search[k], replace[k]);			i = subject.indexOf(search[k],i);			}		}	return subject;	}function GetStrPrt(str, del, indx)	{	strArr1 = str.split(del);	var ret = strArr1[indx];	return ret;	}function showProperties(obj, objName) {  var result = "The properties for the " + objName + " object:" + "\n";    for (var i in obj) {result += i + " = " + obj[i] + "\n";}    return result;}function setFilter()	{	this.objId = '';	this.type = '';	this.spec = '';	this.material = '';	this.state = '';	this.district = '';	this.dateStart = '';	this.dateEnd = '';	this.isEmpty = function()		{		var filterSumm = /*this.objId + this.type + */this.material + this.state + this.district + this.dateStart + this.dateEnd;		return ((filterSumm=='')||(filterSumm==0)) ? 1 : 0;		}	this.clear = function()		{		this.objId = '';		this.type = '';		this.spec = '';		this.district = '';		this.material = '';		this.state = '';		this.dateStart = '';		this.dateEnd = '';				}	this.getParam = function()		{		function setFilterParam(objId, type, spec,  material, state, district, dateStart, dateEnd)			{			this.objId = objId;			this.type = type;			this.spec = spec;			this.material = material;			this.state = state;			this.district = district;			this.dateStart = dateStart;			this.dateEnd = dateEnd;			}		var out = new setFilterParam(this.objId, this.type, this.spec, this.material, this.state, this.district, this.dateStart , this.dateEnd );			return out;		}	this.setFilterFromURL = function(url)		{//		alert(url);//		var str = GetStrPrt(url, 'filter_', 1);		var str = GetStrPrt(url, '_', 1);//		alert(str);		if(str != undefined)			{			var filterArr = str.split('-');	//			alert(showProperties(par[i], 'par'));			//			alert(str);			for(var i=0; i<filterArr.length;  i++ )				{	//			alert(str);				parArr = filterArr[i].split('~');	//			alert(filterArr[i] + ': ' + parArr[0] + ' - ' + parArr[1]);				if(parArr[0] == 'state')					{					this.state = parArr[1];					}				else if(parArr[0] == 'material')					{					this.material = parArr[1];								}				else if(parArr[0] == 'spec')					{					this.spec = parArr[1];								}				else if(parArr[0] == 'district')					{					this.district = parArr[1];								}				else if(parArr[0] == 'start')					{					this.dateStart = parArr[1];								}				else if(parArr[0] == 'end')					{					this.dateEnd = parArr[1];								}				}			}		}	this.getFilterURL = function()		{		var filterStr = '';		var filterStrOut;		if(this.objId)			filterStrOut = this.objId;		else			{			if(this.state)				{								filterStr +=  (filterStr == '' ) ? '' : '-';							filterStr +=  'state~' + this.state;							}			if(this.district)				{								filterStr +=  (filterStr == '' ) ? '' : '-';							filterStr +=  'district~' + this.district;							}			if(this.material)				{								filterStr +=  (filterStr == '' ) ? '' : '-';							filterStr +=  'material~' + this.material;						}			if(this.dateStart)				{								filterStr +=  (filterStr == '' ) ? '' : '-';							filterStr +=  'start~' + this.dateStart;				}			if(this.dateEnd)				{								filterStr +=  (filterStr == '' ) ? '' : '-';							filterStr +=  'end~' + this.dateEnd;				}			filterStrOut = 'filter_' + filterStr;					}		return filterStrOut;		}	this.getParamArray = function()		{		function setFilterParamSingle(name, value)				{			this.name = name;			this.value = value;			}		var param = new Array();			param[0] = new setFilterParamSingle('objId', this.objId);			param[1] = new setFilterParamSingle('type', this.type)	;		param[2] = new setFilterParamSingle('district', this.district)	;		param[3] = new setFilterParamSingle('material', this.material)	;		param[4] = new setFilterParamSingle('state', this.state)	;		param[5] = new setFilterParamSingle('dateStart', str_replace( '.', '_', this.dateStart))	;		param[6] = new setFilterParamSingle('dateEnd', str_replace( '.', '_', this.dateEnd))	;		return param;		}	this.setParam =  function(name, value)		{		if(value == 0)			value = '';		if((name == 'state') || (name == 'State'))			{			this.state = value;			}		else if((name == 'id')  || (name == 'objId'))			{			this.objId = value;						}		else if((name == 'district')  || (name == 'District'))			{			this.district = value;						}		else if((name == 'material')  || (name == 'Material'))			{			this.material = value;						}		else if((name == 'start')  || (name == 'Start')  || (name == 'dateStart'))			{			this.dateStart = str_replace( '_', '.', value);			}		else if((name == 'end')  || (name == 'End')  || (name == 'dateEnd'))			{			this.dateEnd = str_replace( '_', '.', value);;						}				else if((name == 'type')  || (name == 'Type'))			{			this.type = value;						}				}	this.updateForm =  function()		{		var obj, objArr, label;		var par = this.getParamArray()		$('[id ^= filterValue_]').removeClass('sortSelected');			for(var i=0; i<par.length; i++)			{			if(document.getElementById('filterValue_' + par[i].name + '~' + par[i].value))				document.getElementById('filterValue_' + par[i].name + '~' + par[i].value).className = 'sortSelected';			}		checkFilter();				}	this.updateFormOld =  function()		{		var obj, objArr, label;		var par = this.getParamArray()		for(var i=0; i<par.length; i++)			{			objArr = $('#filterPanel select[id$=' + par[i].name + ']');			if(objArr.length >0 )				{				obj = objArr[0];				obj.value = (par[i].value == '') ? 0 : par[i].value;				label = obj.options[obj.selectedIndex].text;//				alert(par[i].name + ' : ' + par[i].value + ' :'+ ' : ' + obj.selectedIndex + ' :'+ ' : ' + obj.selectedIndex + ' :' + label + ' :' + showProperties(obj, 'obj'));				$('#' + obj.id + 'Value').html(label);							}			}		checkFilter();				}	}function clearFilter()	{		$('[id ^= filterValue_]').removeClass('sortSelected');		filter.clear();	checkFilter();	}function clearFilterOld()	{		var objArr = $('#filterPanel select');	for(var i=0; i<objArr.length; i++)		{		objArr[i].selectedIndex = 0;		$('#' + objArr[i].id + 'Value').html(objArr[i].options[objArr[i].selectedIndex].text);		}	filter.clear();	checkFilter();	}function changeFilterValue(obj)	{//	alert(obj.id);	var nameArr = GetStrPrt(obj.id, '_', 1);	var name = GetStrPrt(nameArr, '~', 0);	var value = GetStrPrt(nameArr, '~', 1);		$('[id ^= filterValue_'+ name +']').removeClass('sortSelected');		$(obj).addClass('sortSelected');	/*	var label = obj.options[obj.selectedIndex].text;	var value = obj.options[obj.selectedIndex].value;	$('#' + obj.id + 'Value').html(label);*/		filter.setParam(name, value);		checkFilter();	}function changeSelectFilter(obj)	{//	alert();	var name = GetStrPrt(obj.id, 'select', 1);	var label = obj.options[obj.selectedIndex].text;	var value = obj.options[obj.selectedIndex].value;	$('#' + obj.id + 'Value').html(label);	filter.setParam(name, value);		checkFilter();	}function checkFilter()	{	if(filter.isEmpty())		{		$('[id ^= filterSubmit]').removeClass('actionButton').addClass('inactiveButton');		$('#filterLabel img').css({'display' : 'none'});//		$('#titleBar #titleContent #filtershow').removeClass('filtershowSelected');		}	else		{		$('#filterLabel img').css({'display' : 'inherit'});		$('[id ^= filterSubmit]').removeClass('inactiveButton').addClass('actionButton');//		$('#titleBar #titleContent #filtershow').addClass('filtershowSelected');		filter.spec = '';		}	$.post("/spddl/", {type:'filter', filter:filter.getParam()}, function(str)		{	//		alert(showProperties(str, 'str'));//		alert(str);		});	}function highlightFilterStarter()	{	$("#filtershow").removeClass("simple").addClass("selected");	}function submitFilter(obj)	{/*	alert(obj.id);*/	if(!filter.isEmpty())		{		filter.setParam('type', 'construction');		var action = GetStrPrt(obj.id, 'filterSubmit', 1);		var url = startLocation;		var filterStr = filter.getFilterURL();		if((window.NAV)&&(NAV.enable)&&(action=='Map')) 			{			showConstruction('');			}		else			{			url +=(action=='Map') ? '/map/' : '/list/';						url += filter.type + '/' + filterStr;//			alert(url);			window.location = url;	/*		alert(window.location);			alert(showProperties(filter.getParam(),'filter'));	*/			}		}	}	function apCmpStart(obj)	{	if(	$(obj).hasClass('cmpActive'))		{		var url = startLocation;		$.post("/spddl/", {type:'getApCmpStr'}, function(str) 			{			if(str != '')				{				url += str;				window.location = url;				}			});		}	else		{}//		alert('---');			}function showYastchik()	{	$('#eml').html('<a href="mailto:post@gorod-detyam.ru" class="mailto" title="Email">РїРѕ РїРѕС‡С‚Рµ</a>')	}function openAuthPanel(obj)	{//	alert('Пока этот функционал недоступен');		var winName = 	'authWindow';	var url = 		'/login/' + obj.id;	var left, top, width, height;	width = 		500;	height = 		500;	left =  		UI.windowWidth/2 - width/2;	top =  			UI.windowHeight/2 - height/2;	var winParams = 'width=' + width + ',height=' + height + ',left=' + left + ',top=' + top + ',resizable=yes,scrollbars=yes,status=no';	var newWin = window.open(url, winName , winParams);	newWin.onClose = function(){window.opener.location.reload(true)};	newWin.focus();	}function submitAuthForm()	{	var error = 0;	if(document.getElementById('Username').value == '')		error += 1;	if(document.getElementById('Password').value == '')		error += 2;	if(error == 0)			document.getElementById('authForm').submit();/*	else				alert('')*/	}